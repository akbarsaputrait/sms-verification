<?php

namespace App\Http\Controllers;

use App\User;
use Illuminate\Http\Request;
use Twilio\Exceptions\RestException;
use Twilio\Rest\Client;

define('ACCOUNT_SID', config('app.twilio')['TWILIO_ACCOUNT_SID']);
define('AUTH_TOKEN', config('app.twilio')['TWILIO_AUTH_TOKEN']);
define('SERVICE_ID', config('app.twilio')['TWILIO_SERVICE_SID']);

class VerificationController extends Controller
{
    public function check()
    {
        return view('sms_verification.validate');
    }

    /**
     * Send SMS Verification Code
     *
     * The verification code will auto generated by twilio
     * You can get the service id on https: //www.twilio.com/console/verify/services
     *
     * https: //www.twilio.com/docs/verify/api-beta/verification-check-beta
     * API Reference -> Verifications
     *
     */
    public function sendSms(Request $request)
    {

        // Check if user has ben registered (Phone Number)
        $user = User::where('encrypted', $request->code)->first();
        $status = 'unvalid-account';
        $msg = null;

        if (!is_null($user)) {
            try {
                $client = new Client(ACCOUNT_SID, AUTH_TOKEN);
                $send = $client->verify->v2
                    ->services(SERVICE_ID)
                    ->verifications
                    ->create($user->mobile_number, "sms");

                $status = 'valid-account';
                if ($send->sid) {
                    $status = 'code-sended';
                }
            } catch (RestException $e) {
                $status = 'unvalid-process';
                $msg =  $e->getMessage();
            }
        }

        return view('sms_verification.validate', ['status' => $status, 'user' => $user, 'msg' => $msg]);
    }


    /**
     * Check Status of Verification Code
     *
     * https: //www.twilio.com/docs/verify/api-beta/verification-check-beta
     * API Reference -> Verification Check
     *
     */
    public function checkVerification(Request $request)
    {
        $status = 'unvalid-code';
        $msg = null;
        try {
            $client = new Client(ACCOUNT_SID, AUTH_TOKEN);

            $check = $client
                ->verify->v2->services(SERVICE_ID)
                ->verificationChecks
                ->create($request->code,
                    ['to' => $request->mobile_number]
                );

            if ($check->valid) {
                $status = 'valid';
                if ($check->status === 'denied' || $check->status === 'expired') {
                    $status = 'unvalid';
                }
                $status = $status . '-verification-' . $check->status;
            }
        } catch (RestException $e) {
            $status = 'unvalid-process';
            $msg =  $e->getMessage();
        }

        return view('sms_verification.validate', ['status' => $status, 'msg' => $msg]);
    }
}
